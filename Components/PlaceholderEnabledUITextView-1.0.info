{"Name":"Placeholder enabled UITextView","Id":2030,"Alias":"PlaceholderEnabledUITextView","Description":"A `UITextView` extension to support placeholders on editable `UITextView` instances. \r\n\r\n`UITextField` has support for placeholders but `UITextView` (sadly) does not, meaning you often have to write custom code to get support for placeholders. No more. This Xamarin component is intended to save you those 15 minutes of scouring StackOverflow and converting a code snippet from Objective-C to C# so you can be doing something better.\r\n","Version":"1.0","Summary":"A UITextView extender so you can stop asking why UITextField has a placeholder but UITextView doesn\u0027t?!","QuickStart":"Add the component to your designer however you want. The namespace, class name, and export name are all `PlaceholderEnabledUITextView`.\r\n\r\nThe control has four properties:\r\n\r\n**Placeholder** \r\n\r\n* Type: `String`\r\n* Default: `null`\r\n* This is the placeholder text you want to appear\r\n\r\n**PlaceholderColor**\r\n\r\n* Type: `UIColor`\r\n* Default: `Gray`\r\n* The colo[u]r of the placeholder text\r\n\r\n**PlaceholderFont**\r\n\r\n* Type: `UIFont`\r\n* Default: `UIFont.SystemFontOfSize(12)`\r\n* The font name/style/size of the placeholder \r\n\r\n**AllowWhiteSpace**\r\n\r\n* Type: `Boolean`\r\n* Default: `False`\r\n* Once the user moves focus away from the `UITextView` we check to see if they\u0027ve entered any text, if not then the placeholder is re-shown. by default we do a `IsNullOrWhiteSpace` check, if you want to do a `IsNullOrEmpty` check then set this to true instead of false.\r\n","Hash":"09ccea5f8b39e980eea918238cf87120","TargetPlatforms":["ios"],"TrialHash":null}